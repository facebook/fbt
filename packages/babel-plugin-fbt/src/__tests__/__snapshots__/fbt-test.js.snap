// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test double-lined params should remove the new line for param names that are two lines 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: { t: { desc: "d", text: "{two lines} test" }, m: [] },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._param(
      "two lines",
      /*#__PURE__*/ React.createElement(
        "b",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: { t: { desc: "test", text: "simple" }, m: [] },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;

exports[`fbt variable binding detection should handle commonJS require() 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: { t: { desc: "Bar", text: "Foo" }, m: [] },
    project: "",
  } /* __FBT__ end */
);

`;

exports[`fbt variable binding detection using ES6 should handle fbt default export 1`] = `
import fbt from "fbt";

fbt._(
  /* __FBT__ start */ {
    jsfbt: { t: { desc: "Bar", text: "Foo" }, m: [] },
    project: "",
  } /* __FBT__ end */
);

`;

exports[`fbt variable binding detection using ES6 should handle the named fbt export 1`] = `
import { fbt } from "fbt";

fbt._(
  /* __FBT__ start */ {
    jsfbt: { t: { desc: "Bar", text: "Foo" }, m: [] },
    project: "",
  } /* __FBT__ end */
);

`;

exports[`fbt() API:  using FBT subject should accept "subject" as a parameter 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: { "*": { desc: "Bar", text: "Foo" } },
      m: [{ token: "__subject__", type: 1 }],
    },
    project: "",
  } /* __FBT__ end */,
  [fbt._subject(foo)]
);

`;

exports[`fbt() API:  using FBT subject with string templates should accept "subject" as a parameter 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: { "*": { desc: "Bar", text: "Foo" } },
      m: [{ token: "__subject__", type: 1 }],
    },
    project: "",
  } /* __FBT__ end */,
  [fbt._subject(foo)]
);

`;

exports[`fbt() API:  using extraOptions JSX fbt should accept extra options with limited value set 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "This is an {=inner string} and a {token}",
        tokenAliases: { "=inner string": "=m1" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._param(
      "token",
      fbt._(
        /* __FBT__ start */ {
          jsfbt: { t: { desc: "d", text: "another string" }, m: [] },
          project: "",
        } /* __FBT__ end */,
        null,
        {
          eo: {
            private: "yes",
          },
        }
      )
    ),
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "b",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "This is an {=inner string} and a {token}"',
                text: "inner string",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          null,
          {
            eo: {
              locale: "ar_AR",
            },
          }
        )
      )
    ),
  ],
  {
    eo: {
      locale: "ar_AR",
    },
  }
);

`;

exports[`fbt() API:  using extraOptions JSX fbt should pass top-level extra options to children inner strings 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "This is {=an inner string and another inner string}",
        tokenAliases: { "=an inner string and another inner string": "=m1" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "b",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "This is {=an inner string and another inner string}"',
                text: "an inner string and {=another inner string}",
                tokenAliases: { "=another inner string": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "b",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "This is an inner string and {=another inner string}"',
                        text: "another inner string",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */,
                  null,
                  {
                    eo: {
                      myOption: "yes",
                    },
                  }
                )
              )
            ),
          ],
          {
            eo: {
              myOption: "yes",
            },
          }
        )
      )
    ),
  ],
  {
    eo: {
      myOption: "yes",
    },
  }
);

`;

exports[`fbt() API:  using extraOptions functional fbt should accept "locale" extra option 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: { t: { desc: "Bar", text: "Foo" }, m: [] },
    project: "",
  } /* __FBT__ end */,
  null,
  {
    eo: {
      locale: "ar_AR",
      private: "yes",
    },
  }
);

`;
