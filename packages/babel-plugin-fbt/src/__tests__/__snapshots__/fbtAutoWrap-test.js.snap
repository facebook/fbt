// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test jsx auto-wrapping of implicit parameters can handle multiple variations in nested strings 1`] = `
var fbt_sv_arg_0, fbt_sv_arg_1;

const fbt = require("fbt");

(fbt_sv_arg_0 = fbt._name("bar", bar, g)),
  (fbt_sv_arg_1 = fbt._plural(num, "baz")),
  fbt._(
    /* __FBT__ start */ {
      jsfbt: {
        t: {
          "*": {
            "*": {
              desc: "some-desc",
              text: "Level 1 {foo}{=Level 2 [bar]Level 3 [baz] cats}",
              tokenAliases: { "=Level 2 [bar]Level 3 [baz] cats": "=m2" },
            },
            _1: {
              desc: "some-desc",
              text: "Level 1 {foo}{=Level 2 [bar]Level 3 1 cat}",
              tokenAliases: { "=Level 2 [bar]Level 3 1 cat": "=m2" },
            },
          },
        },
        m: [
          { token: "bar", type: 1 },
          { token: "baz", type: 2, singular: true },
        ],
      },
      project: "",
    } /* __FBT__ end */,
    [
      fbt_sv_arg_0,
      fbt_sv_arg_1,
      fbt._param("foo", foo),
      fbt._implicitParam(
        "=m2",
        /*#__PURE__*/ React.createElement(
          "a",
          null,
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  "*": {
                    "*": {
                      desc:
                        'In the phrase: "Level 1 {foo}{=Level 2 [bar]Level 3 [baz] cats}"',
                      text: "Level 2 {bar}{=Level 3 [baz] cats}",
                      tokenAliases: { "=Level 3 [baz] cats": "=m2" },
                    },
                    _1: {
                      desc:
                        'In the phrase: "Level 1 {foo}{=Level 2 [bar]Level 3 1 cat}"',
                      text: "Level 2 {bar}{=Level 3 1 cat}",
                      tokenAliases: { "=Level 3 1 cat": "=m2" },
                    },
                  },
                },
                m: [
                  { token: "bar", type: 1 },
                  { token: "baz", type: 2, singular: true },
                ],
              },
              project: "",
            } /* __FBT__ end */,
            [
              fbt_sv_arg_0,
              fbt_sv_arg_1,
              fbt._implicitParam(
                "=m2",
                /*#__PURE__*/ React.createElement(
                  "b",
                  null,
                  fbt._(
                    /* __FBT__ start */ {
                      jsfbt: {
                        t: {
                          "*": {
                            "*": {
                              desc:
                                'In the phrase: "Level 1 {foo}Level 2 {bar}{=Level 3 [baz] cats}"',
                              text: "Level 3 {baz} cats",
                            },
                            _1: {
                              desc:
                                'In the phrase: "Level 1 {foo}Level 2 {bar}{=Level 3 1 cat}"',
                              text: "Level 3 1 cat",
                            },
                          },
                        },
                        m: [
                          { token: "bar", type: 1 },
                          { token: "baz", type: 2, singular: true },
                        ],
                      },
                      project: "",
                    } /* __FBT__ end */,
                    [fbt_sv_arg_0, fbt_sv_arg_1]
                  )
                )
              ),
            ]
          )
        )
      ),
    ]
  );

`;

exports[`Test jsx auto-wrapping of implicit parameters can handle multiple variations in nested strings and a subject gender 1`] = `
var fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2;

const fbt = require("fbt");

(fbt_sv_arg_0 = fbt._subject(g0)),
  (fbt_sv_arg_1 = fbt._pronoun(1, g1)),
  (fbt_sv_arg_2 = fbt._plural(num, "foo")),
  fbt._(
    /* __FBT__ start */ {
      jsfbt: {
        t: {
          "*": {
            1: {
              "*": {
                desc: "description",
                text: "Level 1 {=her some_pronoun}{=Level 2 [foo] cats}",
                tokenAliases: {
                  "=her some_pronoun": "=m1",
                  "=Level 2 [foo] cats": "=m2",
                },
              },
              _1: {
                desc: "description",
                text: "Level 1 {=her some_pronoun}{=Level 2 1 cat}",
                tokenAliases: {
                  "=her some_pronoun": "=m1",
                  "=Level 2 1 cat": "=m2",
                },
              },
            },
            2: {
              "*": {
                desc: "description",
                text: "Level 1 {=his some_pronoun}{=Level 2 [foo] cats}",
                tokenAliases: {
                  "=his some_pronoun": "=m1",
                  "=Level 2 [foo] cats": "=m2",
                },
              },
              _1: {
                desc: "description",
                text: "Level 1 {=his some_pronoun}{=Level 2 1 cat}",
                tokenAliases: {
                  "=his some_pronoun": "=m1",
                  "=Level 2 1 cat": "=m2",
                },
              },
            },
            "*": {
              "*": {
                desc: "description",
                text: "Level 1 {=their some_pronoun}{=Level 2 [foo] cats}",
                tokenAliases: {
                  "=their some_pronoun": "=m1",
                  "=Level 2 [foo] cats": "=m2",
                },
              },
              _1: {
                desc: "description",
                text: "Level 1 {=their some_pronoun}{=Level 2 1 cat}",
                tokenAliases: {
                  "=their some_pronoun": "=m1",
                  "=Level 2 1 cat": "=m2",
                },
              },
            },
          },
        },
        m: [
          { token: "__subject__", type: 1 },
          null,
          { token: "foo", type: 2, singular: true },
        ],
      },
      project: "",
    } /* __FBT__ end */,
    [
      fbt_sv_arg_0,
      fbt_sv_arg_1,
      fbt_sv_arg_2,
      fbt._implicitParam(
        "=m1",
        /*#__PURE__*/ React.createElement(
          "a",
          {
            href: "#new",
          },
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  "*": {
                    1: {
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 [foo] cats}"',
                        text: "her some_pronoun",
                      },
                      _1: {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 1 cat}"',
                        text: "her some_pronoun",
                      },
                    },
                    2: {
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 [foo] cats}"',
                        text: "his some_pronoun",
                      },
                      _1: {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 1 cat}"',
                        text: "his some_pronoun",
                      },
                    },
                    "*": {
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 [foo] cats}"',
                        text: "their some_pronoun",
                      },
                      _1: {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 1 cat}"',
                        text: "their some_pronoun",
                      },
                    },
                  },
                },
                m: [
                  { token: "__subject__", type: 1 },
                  null,
                  { token: "foo", type: 2, singular: true },
                ],
              },
              project: "",
            } /* __FBT__ end */,
            [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2]
          )
        )
      ),
      fbt._implicitParam(
        "=m2",
        /*#__PURE__*/ React.createElement(
          "b",
          null,
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  "*": {
                    1: {
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 [foo] cats}"',
                        text: "Level 2 {foo} cats",
                      },
                      _1: {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 1 cat}"',
                        text: "Level 2 1 cat",
                      },
                    },
                    2: {
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 [foo] cats}"',
                        text: "Level 2 {foo} cats",
                      },
                      _1: {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 1 cat}"',
                        text: "Level 2 1 cat",
                      },
                    },
                    "*": {
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 [foo] cats}"',
                        text: "Level 2 {foo} cats",
                      },
                      _1: {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 1 cat}"',
                        text: "Level 2 1 cat",
                      },
                    },
                  },
                },
                m: [
                  { token: "__subject__", type: 1 },
                  null,
                  { token: "foo", type: 2, singular: true },
                ],
              },
              project: "",
            } /* __FBT__ end */,
            [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2]
          )
        )
      ),
    ]
  );

`;

exports[`Test jsx auto-wrapping of implicit parameters can handle multiple variations in nested strings with substrings that look identical 1`] = `
var fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2;

const fbt = require("fbt");

(fbt_sv_arg_0 = fbt._subject(g0)),
  (fbt_sv_arg_1 = fbt._pronoun(1, g1)),
  (fbt_sv_arg_2 = fbt._pronoun(1, g2)),
  fbt._(
    /* __FBT__ start */ {
      jsfbt: {
        t: {
          "*": {
            1: {
              1: {
                desc: "description",
                text: "Level 1 {=her some_pronoun}{=Level 2 her some_pronoun}",
                tokenAliases: {
                  "=her some_pronoun": "=m1",
                  "=Level 2 her some_pronoun": "=m2",
                },
              },
              2: {
                desc: "description",
                text: "Level 1 {=her some_pronoun}{=Level 2 his some_pronoun}",
                tokenAliases: {
                  "=her some_pronoun": "=m1",
                  "=Level 2 his some_pronoun": "=m2",
                },
              },
              "*": {
                desc: "description",
                text:
                  "Level 1 {=her some_pronoun}{=Level 2 their some_pronoun}",
                tokenAliases: {
                  "=her some_pronoun": "=m1",
                  "=Level 2 their some_pronoun": "=m2",
                },
              },
            },
            2: {
              1: {
                desc: "description",
                text: "Level 1 {=his some_pronoun}{=Level 2 her some_pronoun}",
                tokenAliases: {
                  "=his some_pronoun": "=m1",
                  "=Level 2 her some_pronoun": "=m2",
                },
              },
              2: {
                desc: "description",
                text: "Level 1 {=his some_pronoun}{=Level 2 his some_pronoun}",
                tokenAliases: {
                  "=his some_pronoun": "=m1",
                  "=Level 2 his some_pronoun": "=m2",
                },
              },
              "*": {
                desc: "description",
                text:
                  "Level 1 {=his some_pronoun}{=Level 2 their some_pronoun}",
                tokenAliases: {
                  "=his some_pronoun": "=m1",
                  "=Level 2 their some_pronoun": "=m2",
                },
              },
            },
            "*": {
              1: {
                desc: "description",
                text:
                  "Level 1 {=their some_pronoun}{=Level 2 her some_pronoun}",
                tokenAliases: {
                  "=their some_pronoun": "=m1",
                  "=Level 2 her some_pronoun": "=m2",
                },
              },
              2: {
                desc: "description",
                text:
                  "Level 1 {=their some_pronoun}{=Level 2 his some_pronoun}",
                tokenAliases: {
                  "=their some_pronoun": "=m1",
                  "=Level 2 his some_pronoun": "=m2",
                },
              },
              "*": {
                desc: "description",
                text:
                  "Level 1 {=their some_pronoun}{=Level 2 their some_pronoun}",
                tokenAliases: {
                  "=their some_pronoun": "=m1",
                  "=Level 2 their some_pronoun": "=m2",
                },
              },
            },
          },
        },
        m: [{ token: "__subject__", type: 1 }, null, null],
      },
      project: "",
    } /* __FBT__ end */,
    [
      fbt_sv_arg_0,
      fbt_sv_arg_1,
      fbt_sv_arg_2,
      fbt._implicitParam(
        "=m1",
        /*#__PURE__*/ React.createElement(
          "a",
          {
            href: "#new",
          },
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  "*": {
                    1: {
                      1: {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 her some_pronoun}"',
                        text: "her some_pronoun",
                      },
                      2: {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 his some_pronoun}"',
                        text: "her some_pronoun",
                      },
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 their some_pronoun}"',
                        text: "her some_pronoun",
                      },
                    },
                    2: {
                      1: {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 her some_pronoun}"',
                        text: "his some_pronoun",
                      },
                      2: {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 his some_pronoun}"',
                        text: "his some_pronoun",
                      },
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 their some_pronoun}"',
                        text: "his some_pronoun",
                      },
                    },
                    "*": {
                      1: {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 her some_pronoun}"',
                        text: "their some_pronoun",
                      },
                      2: {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 his some_pronoun}"',
                        text: "their some_pronoun",
                      },
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 their some_pronoun}"',
                        text: "their some_pronoun",
                      },
                    },
                  },
                },
                m: [{ token: "__subject__", type: 1 }, null, null],
              },
              project: "",
            } /* __FBT__ end */,
            [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2]
          )
        )
      ),
      fbt._implicitParam(
        "=m2",
        /*#__PURE__*/ React.createElement(
          "b",
          null,
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  "*": {
                    1: {
                      1: {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 her some_pronoun}"',
                        text: "Level 2 {=her some_pronoun}",
                        tokenAliases: { "=her some_pronoun": "=m1" },
                      },
                      2: {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 his some_pronoun}"',
                        text: "Level 2 {=his some_pronoun}",
                        tokenAliases: { "=his some_pronoun": "=m1" },
                      },
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=her some_pronoun}{=Level 2 their some_pronoun}"',
                        text: "Level 2 {=their some_pronoun}",
                        tokenAliases: { "=their some_pronoun": "=m1" },
                      },
                    },
                    2: {
                      1: {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 her some_pronoun}"',
                        text: "Level 2 {=her some_pronoun}",
                        tokenAliases: { "=her some_pronoun": "=m1" },
                      },
                      2: {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 his some_pronoun}"',
                        text: "Level 2 {=his some_pronoun}",
                        tokenAliases: { "=his some_pronoun": "=m1" },
                      },
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=his some_pronoun}{=Level 2 their some_pronoun}"',
                        text: "Level 2 {=their some_pronoun}",
                        tokenAliases: { "=their some_pronoun": "=m1" },
                      },
                    },
                    "*": {
                      1: {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 her some_pronoun}"',
                        text: "Level 2 {=her some_pronoun}",
                        tokenAliases: { "=her some_pronoun": "=m1" },
                      },
                      2: {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 his some_pronoun}"',
                        text: "Level 2 {=his some_pronoun}",
                        tokenAliases: { "=his some_pronoun": "=m1" },
                      },
                      "*": {
                        desc:
                          'In the phrase: "Level 1 {=their some_pronoun}{=Level 2 their some_pronoun}"',
                        text: "Level 2 {=their some_pronoun}",
                        tokenAliases: { "=their some_pronoun": "=m1" },
                      },
                    },
                  },
                },
                m: [{ token: "__subject__", type: 1 }, null, null],
              },
              project: "",
            } /* __FBT__ end */,
            [
              fbt_sv_arg_0,
              fbt_sv_arg_1,
              fbt_sv_arg_2,
              fbt._implicitParam(
                "=m1",
                /*#__PURE__*/ React.createElement(
                  "a",
                  {
                    href: "#new",
                  },
                  fbt._(
                    /* __FBT__ start */ {
                      jsfbt: {
                        t: {
                          "*": {
                            1: {
                              1: {
                                desc:
                                  'In the phrase: "Level 1 {=her some_pronoun}Level 2 {=her some_pronoun}"',
                                text: "her some_pronoun",
                              },
                              2: {
                                desc:
                                  'In the phrase: "Level 1 {=her some_pronoun}Level 2 {=his some_pronoun}"',
                                text: "his some_pronoun",
                              },
                              "*": {
                                desc:
                                  'In the phrase: "Level 1 {=her some_pronoun}Level 2 {=their some_pronoun}"',
                                text: "their some_pronoun",
                              },
                            },
                            2: {
                              1: {
                                desc:
                                  'In the phrase: "Level 1 {=his some_pronoun}Level 2 {=her some_pronoun}"',
                                text: "her some_pronoun",
                              },
                              2: {
                                desc:
                                  'In the phrase: "Level 1 {=his some_pronoun}Level 2 {=his some_pronoun}"',
                                text: "his some_pronoun",
                              },
                              "*": {
                                desc:
                                  'In the phrase: "Level 1 {=his some_pronoun}Level 2 {=their some_pronoun}"',
                                text: "their some_pronoun",
                              },
                            },
                            "*": {
                              1: {
                                desc:
                                  'In the phrase: "Level 1 {=their some_pronoun}Level 2 {=her some_pronoun}"',
                                text: "her some_pronoun",
                              },
                              2: {
                                desc:
                                  'In the phrase: "Level 1 {=their some_pronoun}Level 2 {=his some_pronoun}"',
                                text: "his some_pronoun",
                              },
                              "*": {
                                desc:
                                  'In the phrase: "Level 1 {=their some_pronoun}Level 2 {=their some_pronoun}"',
                                text: "their some_pronoun",
                              },
                            },
                          },
                        },
                        m: [{ token: "__subject__", type: 1 }, null, null],
                      },
                      project: "",
                    } /* __FBT__ end */,
                    [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2]
                  )
                )
              ),
            ]
          )
        )
      ),
    ]
  );

`;

exports[`Test jsx auto-wrapping of implicit parameters should auto wrap a simple test with a nested level 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=Your friends liked} your video",
        tokenAliases: { "=Your friends liked": "=m0" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        Link,
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=Your friends liked} your video"',
                text: "Your friends {=liked}",
                tokenAliases: { "=liked": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "b",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "Your friends {=liked} your video"',
                        text: "liked",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should auto wrap a simple test with one level 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=Your friends} liked your video",
        tokenAliases: { "=Your friends": "=m0" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "link",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=Your friends} liked your video"',
                text: "Your friends",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should work with multiple <fbt> calls in one file 1`] = `
const fbt = require("fbt");

/*#__PURE__*/
React.createElement(
  "div",
  null,
  fbt._(
    /* __FBT__ start */ {
      jsfbt: {
        t: {
          desc: "one",
          text: "{=first} fbt call",
          tokenAliases: { "=first": "=m0" },
        },
        m: [],
      },
      project: "",
    } /* __FBT__ end */,
    [
      fbt._implicitParam(
        "=m0",
        /*#__PURE__*/ React.createElement(
          "div",
          {
            href: "#",
          },
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  desc: 'In the phrase: "{=first} fbt call"',
                  text: "first",
                },
                m: [],
              },
              project: "",
            } /* __FBT__ end */
          )
        )
      ),
    ]
  ),
  fbt._(
    /* __FBT__ start */ {
      jsfbt: {
        t: {
          desc: "two",
          text: "{=second} test",
          tokenAliases: { "=second": "=m0" },
        },
        m: [],
      },
      project: "",
    } /* __FBT__ end */,
    [
      fbt._implicitParam(
        "=m0",
        /*#__PURE__*/ React.createElement(
          "div",
          {
            href: "#",
          },
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: { desc: 'In the phrase: "{=second} test"', text: "second" },
                m: [],
              },
              project: "",
            } /* __FBT__ end */
          )
        )
      ),
    ]
  )
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap a <fbt> child nested in an explicit <fbt:param> 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: { t: { desc: "d", text: "{explicit fbt param}" }, m: [] },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._param(
      "explicit fbt param",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: "d2",
                text: "explicit fbt param {=with a nested implicit param}",
                tokenAliases: { "=with a nested implicit param": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "explicit fbt param {=with a nested implicit param}"',
                        text: "with a nested implicit param",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap a <fbt> child next to an explicit <fbt:param> 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{explicit param next to}{=an implicit param}",
        tokenAliases: { "=an implicit param": "=m1" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._param(
      "explicit param next to",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: { t: { desc: "d2", text: "explicit param next to" }, m: [] },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{explicit param next to}{=an implicit param}"',
                text: "an implicit param",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap a single unwrapped <fbt> child and a string above 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=This is a nested} test",
        tokenAliases: { "=This is a nested": "=m0" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "b",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=This is a nested} test"',
                text: "This is {=a nested}",
                tokenAliases: { "=a nested": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "link",
                {
                  href: "#",
                },
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc: 'In the phrase: "This is {=a nested} test"',
                        text: "a nested",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap a single unwrapped <fbt> child and a string below 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=this is} a singly nested test",
        tokenAliases: { "=this is": "=m0" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=this is} a singly nested test"',
                text: "this is",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap a string next to an explicit <fbt:param> that has a implicit <fbt:param> within it 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text:
          "outer string that should not appear in inner desc {explicit fbt param}",
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._param(
      "explicit fbt param",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: "d2",
                text: "explicit fbt param {=with a nested implicit param}",
                tokenAliases: { "=with a nested implicit param": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "explicit fbt param {=with a nested implicit param}"',
                        text: "with a nested implicit param",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap an outer and inner child 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=this is a doubly} nested test",
        tokenAliases: { "=this is a doubly": "=m0" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=this is a doubly} nested test"',
                text: "{=this is} a doubly",
                tokenAliases: { "=this is": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  href: "#",
                },
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "{=this is} a doubly nested test"',
                        text: "this is",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap explicit params nested in implicit params with [] 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text:
          "{=this is a test [to make sure that explicit params under an implicit node][and ones that are next to each other] under an implicit tag are wrapped with [ ]}{but free standing ones are not}",
        tokenAliases: {
          "=this is a test [to make sure that explicit params under an implicit node][and ones that are next to each other] under an implicit tag are wrapped with [ ]":
            "=m0",
        },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._param(
      "but free standing ones are not",
      /*#__PURE__*/ React.createElement(
        "link",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: "d3",
                text: "but free standing ones {=are not}",
                tokenAliases: { "=are not": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "b",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "but free standing ones {=are not}"',
                        text: "are not",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=this is a test [to make sure that explicit params under an implicit node][and ones that are next to each other] under an implicit tag are wrapped with [ ]}{but free standing ones are not}"',
                text:
                  "this is a test {to make sure that explicit params under an implicit node}{and ones that are next to each other} under an implicit tag are wrapped with [ ]",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._param(
              "to make sure that explicit params under an implicit node",
              /*#__PURE__*/ React.createElement(
                "link",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc: "d2",
                        text:
                          "to make sure that explicit tags {=under an implicit node}",
                        tokenAliases: { "=under an implicit node": "=m1" },
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */,
                  [
                    fbt._implicitParam(
                      "=m1",
                      /*#__PURE__*/ React.createElement(
                        "b",
                        null,
                        fbt._(
                          /* __FBT__ start */ {
                            jsfbt: {
                              t: {
                                desc:
                                  'In the phrase: "to make sure that explicit tags {=under an implicit node}"',
                                text: "under an implicit node",
                              },
                              m: [],
                            },
                            project: "",
                          } /* __FBT__ end */
                        )
                      )
                    ),
                  ]
                )
              )
            ),
            fbt._param(
              "and ones that are next to each other",
              /*#__PURE__*/ React.createElement(
                "link",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc: "d3",
                        text: "and ones that are next {=to each other}",
                        tokenAliases: { "=to each other": "=m1" },
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */,
                  [
                    fbt._implicitParam(
                      "=m1",
                      /*#__PURE__*/ React.createElement(
                        "b",
                        null,
                        fbt._(
                          /* __FBT__ start */ {
                            jsfbt: {
                              t: {
                                desc:
                                  'In the phrase: "and ones that are next {=to each other}"',
                                text: "to each other",
                              },
                              m: [],
                            },
                            project: "",
                          } /* __FBT__ end */
                        )
                      )
                    ),
                  ]
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap two children with one nested level 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=this is a doubly} nested test {=with an additional level}",
        tokenAliases: {
          "=this is a doubly": "=m0",
          "=with an additional level": "=m2",
        },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=this is a doubly} nested test {=with an additional level}"',
                text: "{=this is} a doubly",
                tokenAliases: { "=this is": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  href: "#",
                },
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "{=this is} a doubly nested test {=with an additional level}"',
                        text: "this is",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
    fbt._implicitParam(
      "=m2",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=this is a doubly} nested test {=with an additional level}"',
                text: "with an additional level",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap two nested next to each other 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=one two}{=three four}",
        tokenAliases: { "=one two": "=m0", "=three four": "=m1" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=one two}{=three four}"',
                text: "one {=two}",
                tokenAliases: { "=two": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  href: "#",
                },
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc: 'In the phrase: "one {=two}{=three four}"',
                        text: "two",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=one two}{=three four}"',
                text: "three {=four}",
                tokenAliases: { "=four": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  href: "#",
                },
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc: 'In the phrase: "{=one two}three {=four}"',
                        text: "four",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap two nested next to each other with an extra level 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=one two [=test]}{=three four}",
        tokenAliases: { "=one two [=test]": "=m0", "=three four": "=m1" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=one two [=test]}{=three four}"',
                text: "one {=two test}",
                tokenAliases: { "=two test": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  href: "#",
                },
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc: 'In the phrase: "one {=two test}{=three four}"',
                        text: "two {=test}",
                        tokenAliases: { "=test": "=m1" },
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */,
                  [
                    fbt._implicitParam(
                      "=m1",
                      /*#__PURE__*/ React.createElement(
                        "div",
                        {
                          href: "#",
                        },
                        fbt._(
                          /* __FBT__ start */ {
                            jsfbt: {
                              t: {
                                desc:
                                  'In the phrase: "one two {=test}{=three four}"',
                                text: "test",
                              },
                              m: [],
                            },
                            project: "",
                          } /* __FBT__ end */
                        )
                      )
                    ),
                  ]
                )
              )
            ),
          ]
        )
      )
    ),
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "div",
        {
          href: "#",
        },
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=one two [=test]}{=three four}"',
                text: "three {=four}",
                tokenAliases: { "=four": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  href: "#",
                },
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "{=one two [=test]}three {=four}"',
                        text: "four",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap two unwrapped <fbt> children 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=wrap once}{=wrap twice}",
        tokenAliases: { "=wrap once": "=m0", "=wrap twice": "=m1" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=wrap once}{=wrap twice}"',
                text: "wrap once",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc: 'In the phrase: "{=wrap once}{=wrap twice}"',
                text: "wrap twice",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;

exports[`Test jsx auto-wrapping of implicit parameters should wrap two unwrapped <fbt> children and 1 nested 1`] = `
const fbt = require("fbt");

fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=wrap once and also}{=wrap twice} complicated",
        tokenAliases: { "=wrap once and also": "=m0", "=wrap twice": "=m1" },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=wrap once and also}{=wrap twice} complicated"',
                text: "wrap once {=and also}",
                tokenAliases: { "=and also": "=m1" },
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */,
          [
            fbt._implicitParam(
              "=m1",
              /*#__PURE__*/ React.createElement(
                "div",
                null,
                fbt._(
                  /* __FBT__ start */ {
                    jsfbt: {
                      t: {
                        desc:
                          'In the phrase: "wrap once {=and also}{=wrap twice} complicated"',
                        text: "and also",
                      },
                      m: [],
                    },
                    project: "",
                  } /* __FBT__ end */
                )
              )
            ),
          ]
        )
      )
    ),
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=wrap once and also}{=wrap twice} complicated"',
                text: "wrap twice",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;
